import torch
from torch import nn #신경망 패키지
from torch import optim #optim은 최적화 함수가 포함돼 있는 모듈이다. 

x = torch.FloatTensor( #파이토치를 이용하기 때문에 ndarray형식이 아닌 파이토치 형식으로!
    [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10],
    [11], [12], [13], [14], [15], [16], [17], [18], [19], [20],
    [21], [22], [23], [24], [25], [26], [27], [28], [29], [30]]  
) #단변량 형태
y = torch.FloatTensor(
    [[0.94], [1.98], [2.88], [3.92], [3.96], [4.55], [5.64], [6.3], [7.44], [9.1],
    [8.46], [9.5], [10.67], [11.16], [14], [11.83], [14.4], [14.25], [16.2], [16.32],
    [17.46], [19.8], [18], [21.34], [22], [22.5], [24.57], [26.04], [21.6], [28.8]]
)

model=nn.Linear(1,1) #선형 변환 적용
criterion = nn.MSELoss() # 평균 제곱 오차 클래스 
optimizer = optim.SGD(model.parameters(), lr=0.001) #weight와 bias 변수를 사용하지 않으므로 모델 매개변수 사용

#순방향 연산
for epoch in range(10000):
  output=model(x) 
  cost=criterion(output,y) #output은 예측값을 의미하고 y는 실젯값을 의미한다.  

  optimizer.zero_grad() #기울기를 0으로 초기화
  cost.backward() #역전파 수행, 매개변수들의 기울기 새로 계산 
  optimizer.step() #학습률 반영한 확률적 경사 하강법 연산

  if (epoch + 1) % 1000 == 0:
    print(f"Epoch : {epoch+1:4d}, Model : {list(model.parameters())}, Cost : {cost:.3f}")
